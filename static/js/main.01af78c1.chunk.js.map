{"version":3,"sources":["components/SeacrhBar/Searchbar.js","components/ImgsList/ImageGalleryItem.js","components/ImgsList/ImageGallery.js","components/LoadMoreBtn/LoadMoreBtn.js","errorImages/cat.jpg","components/Loader.js","errorImages/cats.jpg","components/Error.js","components/services/FetchImgs.js","components/Modal.js","components/Container/Container.js","components/App.js","index.js"],"names":["Searchbar","state","imgName","handleChange","e","setState","currentTarget","value","toLowerCase","trim","handleSubmit","preventDefault","props","onSubmit","alert","className","this","type","onChange","name","autoComplete","autoFocus","placeholder","Component","ImageGalleryItem","webformatURL","largeImageURL","alt","width","src","largeurl","ImageGallery","entriesImgs","openModal","map","id","tags","onClick","LoadMoreBtn","LoaderForImg","defaultImg","color","height","timeout","Error","message","role","errorImage","api","FetchImgs","page","BASE_URL","fetch","then","response","ok","json","Promise","reject","modalRoot","document","querySelector","Modal","handleKeyDownESC","code","onClose","handleBackdropClick","target","window","addEventListener","removeEventListener","createPortal","children","defaultProps","PropTypes","func","isRequired","Container","App","error","status","showModal","getData","data","getImgFromFetch","pageNumber","imgAPI","hits","length","catch","getImgFromFetchOnBtn","prev","scroll","scrollTo","top","documentElement","scrollHeight","behavior","pageIncrement","handleFormSubmit","toggleModalWindow","url","largeURL","prevProps","prevState","prevName","nextName","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.01af78c1.chunk.js","sourcesContent":["// import { toast } from \"react-toastify\";\nimport React, { Component } from \"react\";\nclass Searchbar extends Component {\n  state = {\n    imgName: \"\",\n  };\n  handleChange = (e) => {\n    this.setState({ imgName: e.currentTarget.value.toLowerCase().trim() });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // const { imgName } = this.state;\n    if (this.state.imgName.trim() === \"\") {\n      alert(\"Please, type what do you want to see.\");\n      // toast(\"Please, type what do you want to see.\");\n      return;\n    }\n    this.props.onSubmit(this.state.imgName); // отпарвка данных\n\n    this.setState({ imgName: \"\" }); // очищение формы\n  };\n  render() {\n    return (\n      <header className=\"Searchbar\">\n        <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            onChange={this.handleChange}\n            value={this.state.imgName}\n            name=\"imgName\"\n            className=\"SearchForm-input\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n          />\n        </form>\n      </header>\n    );\n  }\n}\nexport default Searchbar;\n","import PropTypes from \"prop-types\";\n//\nfunction ImageGalleryItem({ webformatURL, largeImageURL, alt }) {\n  // console.log(alt)\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img\n        width=\"240\"\n        src={webformatURL}\n        alt={alt}\n        largeurl={largeImageURL}\n        className=\"ImageGalleryItem-image\"\n      />\n    </li>\n  );\n}\nImageGalleryItem.propTypes = {\n  webformatURL: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  alt: PropTypes.string.isRequired,\n  largeImageURL: PropTypes.string.isRequired,\n};\nexport default ImageGalleryItem;\n","import PropTypes from \"prop-types\";\nimport ImageGalleryItem from \"./ImageGalleryItem\";\n// import FetchImgs from \"./services/FetchImgs\";\n\nfunction ImageGallery({ entriesImgs, openModal }) {\n  // console.log(entriesImgs, \"from g\");\n  return (\n    <div>\n      <ul className=\"ImageGallery\">\n        {/* <li className=\"ImageGalleryItem\"> */}\n        {entriesImgs.map(({ id, webformatURL, largeImageURL, tags }) => {\n          return (\n            <ImageGalleryItem\n              key={id}\n              id={id}\n              webformatURL={webformatURL}\n              alt={tags}\n              onClick={openModal}\n              largeImageURL={largeImageURL}\n            />\n          );\n        })}\n        {/* </li> */}\n      </ul>\n    </div>\n  );\n}\n\nImageGallery.propTypes = {\n  entriesImgs: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      webformatURL: PropTypes.string.isRequired,\n      tags: PropTypes.string.isRequired,\n      largeImageURL: PropTypes.string.isRequired,\n    })\n  ),\n  // openModal: PropTypes.func.isRequired,\n};\nexport default ImageGallery;\n","import PropTypes from \"prop-types\";\n\nfunction LoadMoreBtn({ onClick }) {\n  return (\n    <button type=\"button\" onClick={onClick} className=\"Button\">\n      Load more\n    </button>\n  );\n}\nLoadMoreBtn.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\nexport default LoadMoreBtn;\n","export default __webpack_public_path__ + \"static/media/cat.910a77a7.jpg\";","import ImageGalleryItem from \"./ImgsList/ImageGalleryItem\";\nimport defaultImg from \"../errorImages/cat.jpg\";\nimport Loader from \"react-loader-spinner\";\n//\nexport default function LoaderForImg() {\n  const webformatURL = defaultImg;\n  return (\n    <div>\n      <ImageGalleryItem webformatURL={webformatURL} />\n      <Loader\n        type=\"Rings\"\n        color=\"#00BFFF\"\n        height={80}\n        width={80}\n        timeout={3000}\n      />\n      <p className=\"loading__text\">Loading...</p>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/cats.35d3b417.jpg\";","import PropTypes from \"prop-types\";\nimport errorImage from \"../errorImages/cats.jpg\";\n\n//\nexport default function Error({ message }) {\n  return (\n    <>\n      {/* <div>{message}</div> */}\n      <div role=\"alert\">\n        <img src={errorImage} width=\"240\" height=\"240\" alt=\"cats\" />\n        <p>{message}</p>\n      </div>\n    </>\n  );\n}\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","function FetchImgs(name, page) {\n  const KEY = \"22980128-788f7e90de699cd9b75eacbcd\";\n  const BASE_URL = `https://pixabay.com/api/?q=${name}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`;\n\n  return fetch(BASE_URL).then((response) => {\n    if (response.ok) {\n      // console.log(response);\n      return response.json();\n    }\n    return Promise.reject(new Error(`\"${name}\" isn't correctly, try again`));\n  });\n}\nconst api = {\n  FetchImgs,\n};\nexport default api;\n\n// fetch(BASE_URL)\n//   .then((res) => res.json())\n// .then(({ hits }) => {\n//   hits.map(({ id, webformatURL, largeImageURL }) => {\n//     // console.log(\"id:\", id, \"webU:\", webformatURL,\"large\", largeImageURL );\n//     return {\n//       ...id,\n//       ...webformatURL,\n//       ...largeImageURL,\n//     };\n//   });\n// });\n\n// .then(({ hits }) => {\n//   hits.map(({ id, webformatURL, largeImageURL }) => {\n//     console.log(\"id:\", id, \"webU:\", webformatURL, \"large\", largeImageURL);\n//     return {\n//       entriesImgs: [id, webformatURL, largeImageURL],\n//     };\n//   });\n// })\n\n// .then(({ hits }) => {\n//   this.setState({ entriesImgs: hits, status: \"resolved\" });\n// })\n","import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst modalRoot = document.querySelector(\"#modal-root\");\n\nclass Modal extends Component {\n  static defaultProps = {\n    onClose: PropTypes.func.isRequired,\n  };\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDownESC);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDownESC);\n  }\n  handleKeyDownESC = (e) => {\n    if (e.code === \"Escape\") {\n      this.props.onClose();\n    }\n  };\n  handleBackdropClick = (e) => {\n    if (e.currentTarget === e.target) {\n      this.props.onClose();\n    }\n  };\n  render() {\n    return createPortal(\n      <div className=\"Overlay\" onClick={this.handleBackdropClick}>\n        <div className=\"Modal\">{this.props.children}</div>\n      </div>,\n      modalRoot\n    );\n  }\n}\n\nexport default Modal;\n","import React from \"react\";\r\nexport default function Container({ children }) {\r\n  return <div className=\"container\">{children}</div>;\r\n}\r\n","import React, { Component } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\n// import Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nimport Searchbar from \"./SeacrhBar/Searchbar\";\nimport ImageGallery from \"./ImgsList/ImageGallery\";\nimport LoadMoreBtn from \"./LoadMoreBtn/LoadMoreBtn\";\nimport LoaderForImg from \"./Loader\";\nimport Error from \"./Error.js\";\nimport imgAPI from \"./services/FetchImgs\";\nimport Modal from \"./Modal\";\nimport Container from \"./Container/Container\";\nimport \"./styles/Style.scss\";\n\nclass App extends Component {\n  state = {\n    imgName: \"\",\n    entriesImgs: null,\n    page: 1,\n    error: null,\n    status: \"idle\",\n    showModal: false,\n    // largeImageURL: \"\",\n  };\n  componentDidUpdate(prevProps, prevState) {\n    const prevName = prevState.imgName;\n    const nextName = this.state.imgName;\n    const { page, showModal } = this.state;\n    //\n    if (prevName !== nextName) {\n      this.setState({ status: \"pending\" });\n\n      this.getImgFromFetch(nextName, page);\n    }\n    if (prevState.page !== page && page !== 1) {\n      this.setState({ status: \"pending\" });\n      this.getImgFromFetchOnBtn(nextName, page);\n    }\n    if (showModal) {\n      // this.setState({largeImageURL: })\n      this.toggleModalWindow();\n    }\n  }\n  getData = (data) => {\n    return data.map(({ id, tags, webformatURL, largeImageURL }) => {\n      return {\n        id: id,\n        webformatURL: webformatURL,\n        tags: tags,\n        largeImageURL: largeImageURL,\n      };\n    });\n  };\n\n  getImgFromFetch = (imgName, pageNumber) => {\n    imgAPI\n      .FetchImgs(imgName, pageNumber)\n      .then(({ hits }) => {\n        const data = this.getData(hits);\n        this.setState({ entriesImgs: data, status: \"resolved\" });\n\n        if (!hits.length) {\n          alert(\"No such pictures, try again\");\n          this.setState({\n            error: \"Something went wrong, please. try again\",\n            status: \"rejected\",\n          });\n        } else this.setState({ error: null });\n      })\n      .catch((error) => this.setState({ error, status: \"rejected\" }));\n  };\n  getImgFromFetchOnBtn = (imgName, page) => {\n    imgAPI\n      .FetchImgs(imgName, page)\n      .then(({ hits }) => {\n        const data = this.getData(hits);\n        this.setState((prev) => ({\n          entriesImgs: [...prev.entriesImgs, ...data],\n          status: \"resolved\",\n        }));\n        this.scroll();\n      })\n      .catch((error) => this.setState({ error, status: \"reject\" }));\n  };\n  scroll = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: \"smooth\",\n    });\n  };\n\n  pageIncrement = () => {\n    return this.setState({\n      page: this.state.page + 1,\n    });\n  };\n  handleFormSubmit = (imgName) => {\n    this.setState({ imgName, page: 1 });\n  };\n\n  toggleModalWindow = (url) => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n      largeURL: url,\n    }));\n  };\n\n  render() {\n    const { entriesImgs, error, status, showModal, largeURL } = this.state;\n    return (\n      <Container className=\"container\">\n        <Searchbar onSubmit={this.handleFormSubmit} />\n        {status === \"idle\" && (\n          <p className=\"header\">Please, type the image name</p>\n        )}\n\n        {status === \"resolved\" && (\n          <>\n            <ImageGallery\n              entriesImgs={entriesImgs}\n              openModal={this.toggleModalWindow}\n            />\n            {status === \" rejected\" && <Error message={error.message} />}\n            {status === \"pending\" && <LoaderForImg />}\n            <LoadMoreBtn onClick={this.pageIncrement}></LoadMoreBtn>\n          </>\n        )}\n        {showModal && (\n          <Modal onClose={this.toggleModalWindow}>\n            <img src={largeURL} alt=\"\" />\n          </Modal>\n        )}\n        <ToastContainer autoClose={3000} />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n// if (response.total === 0) {\n//   return console.log(`The picture ${nextName} isn't exist`);\n// }\n\n//\n// if (prevProps.page !== page && page !== 1) {\n//   this.fetchImgNext(nextName, page);\n// }\n// if (prevProps.page && !prevProps.showModal) {\n//   window.scrollTo({\n//     top: document.documentElement.scrollHeight,\n//     behavior: \"smooth\",\n//   });\n// }\n\n// ++++++\n// fetchImgNext = (imgName, pageIncrement) => {\n//   imgAPI.FetchImgs(imgName, pageIncrement).then(({ hits }) => {\n//     console.log(hits);\n//     // console.log(this.pageIncrement);\n//     this.setState((prevState) => ({\n//       entriesImgs: [...prevState.entriesImgs, ...hits],\n//     }));\n//   });\n// };\n\n// getImgs = (imgName, pageNumber) => {\n//   FetchImgs(imgName, pageNumber)\n//     .then(({ hits }) => {\n//       this.setState({ entriesImgs: hits, status: \"resolved\" });\n//     })\n//     .catch(() => {\n//       if (!imgName) {\n//         this.setState({\n//           error: \"Something went wrong, please. try again\",\n//           status: \"rejected\",\n//         });\n//       }\n//     });\n// };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./components/App.js\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}